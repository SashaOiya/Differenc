#include "my_prog.h"
#include "front.h"

int Factorial ( size_t number )
{
    if ( number <= 1 ) {

        return 1;
    }

    return number * Factorial ( number - 1 );
}

void print_color ( const char *line, enum Color_t COLOR, ... )
{
    HANDLE hConsole = GetStdHandle ( STD_OUTPUT_HANDLE );

    va_list args;
    va_start ( args, COLOR );

    SetConsoleTextAttribute ( hConsole, COLOR );

    vprintf ( line, args );

    SetConsoleTextAttribute ( hConsole, COLOR_WHITE );

    va_end ( args );
}

int Get_File_Size ( FILE * f )
{
    int prev = ftell ( f );

    fseek ( f, 0, SEEK_END );
    size_t size_not_blue = ftell ( f );
    fseek ( f, prev, SEEK_SET );

    return size_not_blue;
}

Prog_Mode_t interface_input ( )
{
    const int max_buf_value = 100;
    char buf[max_buf_value] = {};

    print_color ( "\nSelect mode\n", COLOR_BLUE );
    scanf ( "%s", buf );
    getchar ( );

    if ( strcmp( buf, "help" ) == 0 ) {

        print_color ( "Here is a list of supported features :"
                      "\n\n  help  \n\n  bye  \n\n  difference  \n\n \n\n taylot \n\n g_dump \n\n"
                                                                               " \n\n t_dump \n\n", COLOR_BLUE );

        return MODE_HELP;
    }
    else if ( strcmp ( buf, "bye" ) == 0 ) {

        return MODE_BYE;
    }
    else if ( strcmp ( buf, "difference" ) == 0 ) {

        return MODE_DIF;
    }
    else if ( strcmp ( buf, "taylor" ) == 0 ) {

        return MODE_TAYLOR;
    }
    else if ( strcmp ( buf, "g_dump" ) == 0 ) {

        return MODE_G_DUMP;
    }
    else if ( strcmp ( buf, "t_dump" ) == 0 ) {

        return MODE_T_DUMP;
    }
    else {

        print_color ( "This option was not found. Use the list of presented functions:\n", COLOR_RED );

        return MODE_ERROR;
    }

    return MODE_ERROR;
}

char *File_Skip_Spaces ( char *data, int file_size ) // +
{
    assert ( data != nullptr );

    char *buffer = (char *)calloc ( file_size + 1, sizeof ( char ) );
    if ( !buffer ) {
        perror ( "buffer memory allocation error\n" );

        return data;
    } // fix error
    
    int position = 0;
    for ( ; *data != '\0' && position < file_size; ++data ) {
        while ( isspace ( *data ) && position < file_size ) {
            ++data;
        }
        buffer[position++] = *data;
    }
    buffer[position] = '\0';

    return buffer;
}

Errors_t File_Reader ( struct File_t *file )  // -
{
    assert ( file != nullptr );

    file->front_f = fopen ( file->file_name, "r" );
    if ( !file->front_f ) {
        print_color ( "File opening error\n", COLOR_RED );

        return ERR_FREAD;
    }

    file->file_size = Get_File_Size ( file->front_f );

    file->out_buffer = ( char *)calloc ( file->file_size + 1, sizeof ( char ) );
    if ( !file->out_buffer ) {
        print_color ( "buffer memory allocation error\n", COLOR_RED );
        fclose ( file->front_f );

        return ERR_FREAD;
    }

    int ret_code = fread ( file->out_buffer, sizeof( file->out_buffer[0] ),
                           file->file_size, file->front_f );
    if ( ret_code != file->file_size ) {
        if ( feof ( file->front_f ) ) {
            perror ( "Error reading test.bin: unexpected end of file\n" );
        }
        else if ( ferror ( file->front_f ) ) {
            perror ( "Error reading test.bin" );
        }
        free ( file->out_buffer );
        fclose ( file->front_f );

        return ERR_FREAD;
    }

    fclose ( file->front_f );

    return OK_FILE;
}
