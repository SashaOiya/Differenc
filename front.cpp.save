#include "recurs_des.h"
#include "front.h"

static const int DUMP_COUNTER = 100;
const double eps = 0.0000001;

void Diff_Interface ( const struct Node_t *start_node, FILE *latex_file )
{
    assert ( start_node != nullptr );
    assert ( latex_file != nullptr );

    Prog_Mode_t dif_mode = MODE_ERROR;

    do {
        Node_t *tree_c = Copy_Node ( start_node );
        dif_mode = interface_input ( );

        switch ( dif_mode ) {
            case MODE_BYE : {
                Print_Latex ( tree_c, latex_file );

                return ;
            }
            break;
            case MODE_DIF : {
                tree_c = Differentiation ( tree_c );
            }
            break;
            case MODE_TAYLOR : {
                tree_c = Taylor ( tree_c );
            }
            break;
            case MODE_G_DUMP : {
            }
            break;
            case MODE_T_DUMP : {
            }
            break;
            case MODE_HELP   : {

            }
            break;
            default          : {
                printf ( "Error\n" );
            }
            break;
        }
        Tree_Graph_Dump ( tree_c );
        Tree_Text_Dump ( tree_c );

        Print_Latex ( tree_c, latex_file );
        Node_Free ( &tree_c );
    } while ( dif_mode != MODE_BYE );
}

Node_t *Create_Node ( Node_Option_t option, int value, struct Node_t *left, struct Node_t *right ) // +
{
    struct Node_t *tree_c = ( Node_t *)calloc ( 1, sizeof ( Node_t ) );
    if ( !tree_c ) {

        return nullptr;
    }
    tree_c->type = option;
    tree_c->value = value;
    tree_c->left = Copy_Node ( left );
    tree_c->right = Copy_Node ( right );

    return tree_c;
}

void Tree_Text_Dump ( const struct Node_t *tree_node ) // +
{
    if ( tree_node == nullptr) {

        return ;
    }
    print_color ( " ( ", COLOR_GREEN );

    Tree_Text_Dump ( tree_node->left  );

    if ( tree_node->type == NODE_TYPE_NUM ) {
        print_color ( "%d", COLOR_GREEN, tree_node->value );
    }
    else if ( tree_node->type == NODE_TYPE_OP ||
              tree_node->type == NODE_TYPE_VAR ) {
        print_color ( "%s", COLOR_GREEN, Get_Op_Name ( tree_node->value ) );
    }

    Tree_Text_Dump ( tree_node->right );

    print_color ( " ) ", COLOR_GREEN );

}

Errors_t Tree_Graph_Dump ( const struct Node_t *tree ) // +
{
    FILE *tree_dump = fopen ( "tree.dot", "w" );
    if ( !tree_dump ) {
        perror ( "File opening failed" );

        return ERR_FOPEN;
    }

    fprintf ( tree_dump, "digraph G { \n"
                         "node [shape = record];\n"
                         " \"%p\" ", tree );

    Tree_Dump_Body ( tree, tree_dump );

    fprintf ( tree_dump, "}\n" );
    fclose ( tree_dump );

    static int file_counter = 0;
    char command_buffer[DUMP_COUNTER] = {};
    fprintf( log(), "<img src=\"tree%d.png\" alt=\"-\" width=\"500\" height=\"600\">\n", file_counter );
    sprintf( command_buffer, "dot -T png tree.dot -o logs/tree%d.png", file_counter++ );
    system ( command_buffer );

    return OK_TREE;
}

void Tree_Dump_Body ( const struct Node_t *tree, FILE *tree_dump ) // -
{
    if ( tree == nullptr) {

        return ;
    }
    // No copy pasta: %s + function print node data(type) return char*?
    if ( tree->type == NODE_TYPE_NUM ) {
        fprintf ( tree_dump , " \"%p\" [shape = Mrecord, style = filled, fillcolor = lightpink "
                              " label = \"%d \"];\n",tree, tree->value );
    }
    else if ( tree->type == NODE_TYPE_VAR ||
              tree->type == NODE_TYPE_OP ) {
        fprintf ( tree_dump, " \"%p\" [shape = Mrecord, style = filled, fillcolor = lightpink "
                             " label = \"%s \"];\n", tree, Get_Op_Name ( tree->value ) );
        //free ( Get_Op_Name ( tree->value ) );
    }

    if ( tree->left != nullptr ) {
        fprintf ( tree_dump, "\"%p\" -> \"%p\" ", tree, tree->left );
    }

    if ( tree->right != nullptr ) {
        fprintf ( tree_dump, "\n \"%p\" -> \"%p\" \n", tree, tree->right );
    }

    Tree_Dump_Body ( tree->left,  tree_dump );
    Tree_Dump_Body ( tree->right, tree_dump );
}

double Eval ( const struct Node_t *node )
{
    if ( node == nullptr ) {

        return 0;
    }
    int var_value = 0;

    if ( Search_Var ( node ) == VAR_FOUND ) {
        print_color ( "\nPlease, enter the value of the variable\n", COLOR_YELLOW );
        scanf ( "%d", &var_value );
    }

    return Eval_Body ( node, var_value );
}

Errors_t Search_Var ( const struct Node_t *node )  // +
{
    if ( node == nullptr ) {

        return VAR_N_FOUND;
    }

    if ( node->type == NODE_TYPE_VAR ) {

        return VAR_FOUND;
    }

    Errors_t left_node_res  = Search_Var ( node->left  );
    Errors_t right_node_res = Search_Var ( node->right );

    if ( left_node_res == VAR_FOUND ||
         right_node_res == VAR_FOUND ) {

        return VAR_FOUND;
    }

    return VAR_N_FOUND;
}

double Eval_Body ( const struct Node_t *node, const int var_value ) // - double or int
{
    if ( node == nullptr ) {

        return 0;
    }
    if ( node->type == NODE_TYPE_NUM ) {

        return node->value;
    }
    else if ( node->type == NODE_TYPE_VAR ) {

        return var_value;
    }

    double left  = Eval_Body ( node->left,  var_value );
    double right = Eval_Body ( node->right, var_value );

    if ( node->type == NODE_TYPE_OP ) {
        switch ( node->value ) {
            case OP_ADD : {

                return left + right;
                break;
            }
            case OP_SUB : {

                return left - right;
                break;
            }
            case OP_DIV : {
                if ( fabs ( right ) < eps ) {
                    printf ( "Error : div by 0\n");

                    return 0;
                }
                return left / right;
                break;
            }
            case OP_MUL : {

                return left * right;
                break;
            }
            case OP_SIN : {

                return sin ( right );
                break;
            }
            case OP_COS : {

                return cos ( right );
                break;
            }
            case OP_TG  : {

                return tan ( right );
                break;
            }
            case OP_CTG : {
                double tan_value = tan ( right );
                if ( fabs ( tan_value ) < eps ) {
                    printf ( "Error : div by 0\n");

                    return 0;
                }
                return 1 / tan ( right );
                break;
            }
            case OP_POW : {
                return left right;
                break;
            }
            default : {
                printf ( "ERROR\n" );

                break;
            }
        }
    }

    return ERR_CTYPE;
}

Node_t *Differentiation ( const struct Node_t *tree )
{
    // allocator �����
    // calloc blockami
    // code generation

    if ( tree == nullptr ) {

        return nullptr;
    }
    if ( tree->type == NODE_TYPE_NUM ) {

        return Create_Node ( NODE_TYPE_NUM, 0, nullptr, nullptr );
    }
    else if ( tree->type == NODE_TYPE_VAR ) {

        return Create_Node ( NODE_TYPE_NUM, 1, nullptr, nullptr );
    }
    else if ( tree->type == NODE_TYPE_OP ){
        switch ( tree->value ) {
            case OP_ADD : {
                Node_t *tree_c = Create_Node ( NODE_TYPE_OP, OP_ADD, Differentiation ( tree->left ), Differentiation ( tree->right ) );
                Optimization ( tree_c );

                return tree_c;
                break;
            }
            case OP_SUB : {
                Node_t *tree_c = Create_Node ( NODE_TYPE_OP, OP_SUB, Differentiation ( tree->left ), Differentiation ( tree->right ) );
                Optimization ( tree_c );

                return tree_c;
                break;
            }
            case OP_MUL : {
                Node_t *tree_c = Create_Node ( NODE_TYPE_OP, OP_ADD, Create_Node ( NODE_TYPE_OP, OP_MUL, Differentiation ( tree->left ), Copy_Node ( tree->right ) ),
                                                                     Create_Node ( NODE_TYPE_OP, OP_MUL, Copy_Node ( tree->left ), Differentiation ( tree->right ) ) );
                Optimization ( tree_c );

                return tree_c;
                break;
            }
            case OP_DIV : {
                Node_t *tree_c = Create_Node ( NODE_TYPE_OP, OP_DIV, Create_Node ( NODE_TYPE_OP, OP_SUB, Create_Node ( NODE_TYPE_OP, OP_MUL, Differentiation ( tree->left ), Copy_Node ( tree->right ) ),
                                                                                                         Create_Node ( NODE_TYPE_OP, OP_MUL, Copy_Node ( tree->left ), Differentiation ( tree->right ) ) ),
                                                                     Create_Node ( NODE_TYPE_OP, OP_MUL, Copy_Node ( tree->right ), Copy_Node ( tree->right ) ) );
                Optimization ( tree_c );

                return tree_c;
                break;
            }
            case OP_POW : {
                Node_t *new_node = Copy_Node ( tree );
                int power_val = new_node->right->value;
                new_node->right->value -= 1;
                Node_t *num_node = Create_Node ( NODE_TYPE_NUM, power_val, nullptr, nullptr );
                Node_t *tree_c   = Create_Node ( NODE_TYPE_OP, OP_MUL, num_node, new_node );

                Optimization ( tree_c );

                return tree_c;
                break;
            }
            case OP_SIN : {
                Node_t *tree_c = Copy_Node ( tree );
                tree_c->value = OP_COS;
                tree_c = Create_Node ( NODE_TYPE_OP, OP_MUL, tree_c, Differentiation ( tree->right) );
                return tree_c;
                break;
            }
            case OP_COS : {
                Node_t *tree_c = Copy_Node ( tree );
                tree_c->value = OP_SIN;
                tree_c = Create_Node ( NODE_TYPE_OP, OP_MUL, tree_c, Differentiation ( tree->right) );
                tree_c = Create_Node ( NODE_TYPE_OP, OP_MUL, Create_Node ( NODE_TYPE_NUM, -1, nullptr, nullptr ), tree_c );

                return tree_c;
                break;
            }
            case OP_TG  : {
                Node_t *tree_c = Copy_Node ( tree );
                tree_c->value = OP_COS;
                tree_c = Create_Node ( NODE_TYPE_OP, OP_MUL, tree_c, tree_c );
                tree_c = Create_Node ( NODE_TYPE_OP, OP_DIV, Create_Node ( NODE_TYPE_NUM, 1, nullptr, nullptr ), tree_c );
                tree_c = Create_Node ( NODE_TYPE_OP, OP_MUL, tree_c, Differentiation ( tree->right ) );

                return tree_c;
                break;
            }
            case OP_CTG  : {
                Node_t *tree_c = Copy_Node ( tree );
                tree_c->value = OP_SIN;
                tree_c = Create_Node ( NODE_TYPE_OP, OP_MUL, tree_c, tree_c );
                tree_c = Create_Node ( NODE_TYPE_OP, OP_DIV, Create_Node ( NODE_TYPE_NUM, -1, nullptr, nullptr ), tree_c );
                tree_c = Create_Node ( NODE_TYPE_OP, OP_MUL, tree_c, Differentiation ( tree->right ) );

                return tree_c;
                break;
            }
            default    : {
                printf ( "ERROR\n" );
            }
        }
    }
    return nullptr;
}

Node_t *Copy_Node ( const struct Node_t *tree)
{
    if (tree == nullptr) return nullptr;
    Node_t* new_tree = (Node_t*)calloc ( 1, sizeof( Node_t ) );
    new_tree->type  = tree->type;
    new_tree->value = tree->value;
    new_tree->left  = Copy_Node(tree->left);
    new_tree->right = Copy_Node(tree->right);

    return new_tree;
}

void Node_Free ( struct Node_t **tree_node ) // +
{
    if ( tree_node != nullptr && *tree_node != nullptr ) {
        Node_Free ( &((*tree_node)->left) );
        Node_Free ( &((*tree_node)->right));

        (*tree_node)->left = nullptr;
        (*tree_node)->right = nullptr;

        *tree_node = nullptr;
    }
}

Errors_t Diff_Tree_Ctor ( struct File_t *file, struct Tree_t *tree, char *open_file ) // +
{
    file->file_name = open_file;
    Errors_t error_name = File_Reader ( file );
    if ( error_name != OK_FILE ) {

        return ERR_FREAD;
    }
    file->out_buffer = File_Skip_Spaces ( file->out_buffer, file->file_size );
    tree->start_node = Get_General ( file->out_buffer, tree->start_node );

    return OK_FILE;
}

void Diff_Tree_Dtor ( struct File_t *file, struct Tree_t *tree ) // +
{
    Node_Free ( &(tree->start_node) );
    free ( file->out_buffer );
}

const char *Get_Op_Name ( int op_type )
{
    switch ( op_type ) {
        case OP_SIN : {

            return "sin";
        }
        break;
        case OP_COS : {

            return "cos";
        }
        break;
        case OP_TG  : {

            return "tg";
        }
        break;
        case OP_CTG : {

            return "ctg";
        }
        break;
        case OP_ADD : {

            return "+";
        }
        break;
        case OP_SUB : {

            return "-";
        }
        break;
        case OP_DIV : {

            return "/";
        }
        break;
        case OP_MUL : {

            return "*";
        }
        break;
        case OP_VAR : {

            return "x";
        }
        break;
        case OP_BRA : {

            return "(";
        }
        break;
        case OP_CL_BRA : {

            return ")";
        }
        break;
        case OP_POW : {

            return "^";
        }
        break;
        default : {
            printf ( "Error\n" );
        }
    }
$
    return "error";
}

Node_t *Taylor ( const struct Node_t *tree_node )
{
    struct Tree_t tree_taylor = {};
    tree_taylor.start_node = Create_Node( NODE_TYPE_NUM, 0, nullptr, nullptr );
    Node_t *taylor_node = Copy_Node ( tree_node );

    int var_value = 0;
    int dec_value = 0;
    if ( Search_Var ( tree_node ) == VAR_FOUND ) {
        print_color ( "\nEnter to which member you want to decompose\n", COLOR_YELLOW );
        scanf ( "%d", &dec_value );
        print_color ( "\nEnter the point at which you want to perform the Taylor expansion\n", COLOR_YELLOW );
        scanf ( "%d", &var_value );
    }

    for ( int i = 0; i <= dec_value; ++i ) {
        tree_taylor.start_node = Create_Node ( NODE_TYPE_OP, OP_ADD, tree_taylor.start_node,
                                                                     Taylor_Body ( taylor_node, i, var_value ) );
    }
    Optimization ( tree_taylor.start_node );

    return tree_taylor.start_node;
}

Node_t *Taylor_Body ( const struct Node_t *tree_node, const int member_n, const int variable_val )
{
    Node_t *var_node       = Create_Node ( NODE_TYPE_VAR, OP_VAR, nullptr, nullptr );
    Node_t *power_var_node = Create_Node ( NODE_TYPE_NUM, 1, nullptr, nullptr );
    Node_t *dif_node = Copy_Node ( tree_node );

    for ( int i = 0; i < member_n; ++i ) {
        power_var_node = Create_Node ( NODE_TYPE_OP, OP_MUL, var_node, power_var_node );
        dif_node = Differentiation ( dif_node );
    }
    double eval_val = Eval_Body ( dif_node, variable_val );
    Node_t *eval_node = Create_Node ( NODE_TYPE_NUM, (int)eval_val / Factorial ( member_n ), nullptr, nullptr );
    power_var_node = Create_Node ( NODE_TYPE_OP, OP_MUL, eval_node, power_var_node );

    return power_var_node;
}
